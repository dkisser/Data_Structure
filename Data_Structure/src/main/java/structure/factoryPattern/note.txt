工厂模式主要分为3这，这三种都是逐步抽象

    简单工厂模式：
        通常由三类角色组成；
        工厂类角色：本模式的核心，含有一定的商业逻辑和判断逻辑。在JAVA中往往由一个具体类实现。
        抽象产品角色：一般是具体产品继承的父类或者实现的接口，在JAVA中由接口或抽象类来实现。
        具体产品角色：工厂类所创建的对象就是此角色的实例，在JAVA中由一个具体类来实现。
    缺点：不是能完全满足OCP，当有新的产品角色时，这个工厂角色就失效了。（可以通过使用反射，加载properties文件来解决这个问题）

    工厂方法模式:
        该模式是在简单工厂模式的基础上做满足了OCP的修改,虽然满足了OCP原则，但是在客户端程序使用时我们还需要自己实例化对象。


    抽象工厂模式：
        适用于维护要创建的对象间的关系。（比如我们要装机，但是装机的主板和cpu之间必须时配套的，若是我们用简单工厂方法来维护，我们可以
        很好的实例化主板对象和cpu对象，但是我们却不能维护这两者之间的关系（即客户端程序可能实例化的主板对象和cpu对象不能匹配。），所以
        对于要实例化的产品对象之间若是存在则某些联系的话，我们就只能采取抽象工厂模式来实例化对象

    工厂模式的使用场景：
        1.在编码时不预见需要创建哪种类的实例。
        2.系统不应依赖于类实例如何被创建、组合和表达的细节。